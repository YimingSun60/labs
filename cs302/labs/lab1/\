#include<iomanip>
#include<iostream>
#include<cstdlib>
#include<utility>
#include<vector>
// include header files needed
using namespace std;

// template <typename Tdata>
// void quickselect(...) { write this }
template <typename Tdata>
void quicksort(vector<Tdata> &V, int left, int right) { 
	int pindex = rand()%(right-left+1)+left;
	swap(V[pindex], V[right]);
	int i =left;
	int j = right;
	Tdata pivot;
	while(1) {
		while (V[++i]<pivot){}
		while (pivot<V[--j]){}
		if (i>=j) break;
		swap (V[i],V[j]);
	}
	pindex = i;
	swap(V[pindex], V[right]);
}




class person_t {
	public:
		person_t() { }
		bool operator<(const person_t & p ){
			if(firstname<p.firstname) 
				return true;
			if(firstname==p.firstname){
				if(lastname<p.lastname)
					return true;
			}
			if(firstname==p.firstname){
				if(lastname==p.lastname){
					if(phonenum<p.phonenum)
						return true;
				}
			}
			return false;
		}

		// add operator< using lastname, firstname, phone number

		friend istream & operator>>(istream &, person_t &);
		friend ostream & operator<<(ostream &, const person_t &);

	private:
		string firstname;
		string lastname;
		string phonenum;
};

istream & operator>>(istream &in, person_t &r) { 
	in>>r.firstname>>r.lastname>>r.phonenum;
	return in;
	// write this to read person_t object data
}

ostream & operator<<(ostream &out, const person_t &r) {
	out<<r.firstname<<r.lastname<<r.phonenum<<endl;
	return out;
	// write this to write person_t object data
}
template <typename T>
void printlist(T p1,T p2) { 
	while (p1 != p2){
		cout << *p1<<"\n";
		++p1;
	}
}

int main(int argc, char *argv[]) {
	// perform command-line check 

	vector<person_t> A;

	person_t din;
	while (cin >> din)
		A.push_back(din);

	int N = (int)A.size();

	int k0 = 0;
	int k1 = N-1;

	// if given as command-line arguments,
	// update k0, k1 and apply quickselect
	// to partition A accordingly

	quicksort(A, k0, k1);

	printlist(A.begin(), A.end());
}
