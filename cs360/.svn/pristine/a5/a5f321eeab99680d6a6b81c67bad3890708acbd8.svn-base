//Yiming Sun
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "fields.h"
#include "dllist.h"
#include <sys/stat.h>
#include <sys/wait.h>
//The function that get the .o file
char* makeo(char *file){
	char *newfile;
	newfile = (char *)malloc(sizeof(strlen(file))+1);
	int i=0;
	for(i = 0;i<strlen(file);i++){
		newfile[i]=file[i];
		if(file[i] =='.')
			break;
	}
	strcat(newfile,"o");
	return newfile;
}

int main(int argc, char**argv){
	IS is;
	int i,mh,mhtime,mc,mctime,mo,motime,me,metime,x;
	struct stat sb;
	struct stat so;

	char *ofile;
	char *e;
	ofile=(char*)malloc(100);
	e=(char*)malloc(100);
	char *gccc,*gcco,*cstr,*ostr;
	gccc=(char*)malloc(100);
	gcco=(char*)malloc(100);
	cstr=(char*)malloc(100);
	ostr=(char*)malloc(100);
	int a = 0;
	int count = 0;
	int max = 0;
	int maxo = 0;
	int sys_err = 0;
	strcpy(cstr,"gcc -c");
	strcpy(ostr,"gcc -o");
//	printf("%s\n",ostr);
	Dllist cl,hl,ll,fl,tmp,temp,ol,ftmp,otmp,ltmp;

	cl=new_dllist();
	hl=new_dllist();
	ll=new_dllist();
	fl=new_dllist();
	ol=new_dllist();

	if(argc == 2){
		is = new_inputstruct(argv[1]);
		if(is==NULL){
			perror(argv[1]);
			exit(1);
		}
	}
	if(argc == 1){
		is=new_inputstruct("fmakefile");
	}


//read the fm file, put value to dlist
	while(get_line(is) >= 0){
		//blank line
		if(strcmp(is->fields[0],"\n")==0){
			
		}
		else if(strcmp(is->fields[0],"C")==0){
			for(i=1;i<is->NF;i++)
				//c=strdup(is->fields[i]);
				dll_append(cl,new_jval_s(strdup(is->fields[i])));
				//						printf("%s\n",c);
//				ofile=makeo(c);
//				dll_append(ol,new_jval_s(ofile));
				//	printf("%s\n",ofile);
			}

		

		else if(strcmp(is->fields[0],"H")==0){
			for(i=1;i<is->NF;i++){
			
				dll_append(hl,new_jval_s(strdup(is->fields[i])));
				//	printf("%s\n",h);
			}
		}
		else if(strcmp(is->fields[0],"L")==0){
			for(i=1;i<is->NF;i++){
		
				dll_append(ll,new_jval_s(strdup(is->fields[i])));
				//	printf("%s\n",e);
			}
		}
		else if(strcmp(is->fields[0],"F")==0){
			for(i=1;i<is->NF;i++){

				dll_append(fl,new_jval_s(strdup(is->fields[i])));
			}
		}
		else if(strcmp(is->fields[0],"E")==0){
			strcpy(e,is->fields[1]);
//			printf("%s\n",e);
			a++;
			if(a>1)
				x=is->line;
		}
	}
//	printf("%s\n",ostr);

	if(a>1){
		fprintf(stderr, "fmakefile (%d) cannot have more than one E line\n", x);
		exit(1);
	}
	if(a==0){
		fprintf(stderr, "No executable specified\n");
		exit(1);
	}
//check the .h file, get the maxumum st_mtime of .h file
	dll_traverse(tmp,hl){
		//		printf("1\n");
		mh=stat(tmp->val.s,&sb);
		//		printf("%d\n",mh);
		if(mh<0){
			fprintf(stderr, "fmakefile: %s: No such file or directory\n",tmp->val.s);
			exit(1);
		}
		else{
		mhtime=sb.st_mtime;
		if(max<mhtime)
			max=mhtime;
		}
		//		printf("1");

	}
//	printf("%s\n",ostr);
//copy flag to command line
	dll_traverse(tmp,fl){
		strcat(cstr," ");
		strcat(cstr,strdup(tmp->val.s));
		
	}
		//ostr=strdup("gcc -o");
		//	printf("%s\n",ostr);
//		printf("1%s\n",ostr);
//go through .c file, get the gcc-c command, and compile it
	dll_traverse(tmp,cl){
		mc=stat(tmp->val.s,&sb);
		//		printf("%d\n",mc);
		if(mc<0){
			fprintf(stderr,"fmakefile: %s: No such file or directory\n", tmp->val.s);
			exit(1);
		}
		//		ofile=makeo(tmp->val.s);
		mctime=sb.st_mtime;
		ofile=makeo(strdup(tmp->val.s));
//		printf("%s\n",ofile);
		mo = stat(ofile,&so);
		motime=so.st_mtime;
		dll_append(ol,new_jval_s(strdup(ofile)));
		if(mo<0){
			strcpy(gccc,cstr);
			strcat(gccc," ");
			strcat(gccc,strdup(tmp->val.s));
			printf("%s\n",gccc);
			sys_err=system(strdup(gccc));
			if(sys_err==-1||WEXITSTATUS(sys_err)!=0){
				fprintf(stderr,"Command failed.  Exiting\n");
				exit(1);
			}
			count = 1;
		}
		else{
			if(motime<max||motime<mctime){
				strcpy(gccc,cstr);
				strcat(gccc," ");
				strcat(gccc,strdup(tmp->val.s));
				printf("%s\n",gccc);
				sys_err=system(strdup(gccc));
				if(sys_err==-1||WEXITSTATUS(sys_err)!=0){
					fprintf(stderr, "Command failed.  Exiting\n");
					exit(1);
				}
				count = 1;

			}

		//		mo=stat(ofile,&so);

		if(motime>maxo)
			maxo=motime;
		}
	}

	me=stat(e,&sb);
	metime=sb.st_mtime;
//	printf("%s\n",ostr);
	//if the executable file not exist
	if(me<0){
//		printf("%s\n",ostr);
		strcpy(gcco,ostr);
		strcat(gcco," ");
		strcat(gcco,strdup(e));
		dll_traverse(ftmp,fl){
			strcat(gcco," ");
			strcat(gcco,strdup(ftmp->val.s));
			//		printf("%s\n",tmp->val.s);
		}

		dll_traverse(otmp,ol){
			strcat(gcco," ");
			strcat(gcco,strdup(otmp->val.s));
			//		printf("%s\n",tmp->val.s);
		}
		dll_traverse(ltmp,ll){
			strcat(gcco," ");
			strcat(gcco,strdup(ltmp->val.s));
		}
		printf("%s\n",gcco);

		sys_err = system(strdup(gcco));
		if(sys_err == -1 || WEXITSTATUS(sys_err)!=0){
			fprintf(stderr, "Command failed.  Fakemake exiting\n");
			exit(1);
		}	

	}
	//	printf("%s\n",e))

	//	printf("%s\n",gcco);
	//if executable file exist, but .c file be recompiled
	else{
	if(metime<maxo||count==1){
//		printf("%s\n",ostr);
		strcpy(gcco,ostr);
//		printf("%s\n",gcco);
		strcat(gcco," ");
		strcat(gcco,strdup(e));
//		printf("%s\n",gcco);
		dll_traverse(ftmp,fl){
			strcat(gcco," ");
			strcat(gcco,strdup(ftmp->val.s));
			//		printf("%s\n",tmp->val.s);
		}

		dll_traverse(otmp,ol){
			strcat(gcco," ");
			strcat(gcco,strdup(otmp->val.s));
			//		printf("%s\n",tmp->val.s);
		}
		dll_traverse(ltmp,ll){
			strcat(gcco," ");
			strcat(gcco,strdup(ltmp->val.s));
		}

		printf("%s\n",gcco);
		sys_err = system(strdup(gcco));
		if(sys_err == -1 || WEXITSTATUS(sys_err)!=0){
			fprintf(stderr, "Command failed.  Fakemake exiting\n");
			exit(1);
		}	
	}
	
	else{
		printf("%s up to date\n", e);
		exit(1);
	}
	}
	jettison_inputstruct(is);

	//	printf("%s\n",gccc);

	free(ofile);
	free(e);
	free(gccc);
	free(gcco);
	free(cstr);
	free(ostr);
	return 0;
}
